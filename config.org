* Installation
Clone into the =.emacs.d= folder created by Emacs
#+BEGIN_SRC 
git clone https://github.com/blemberger-b/emacs-config.git ~/.emacs.d
#+END_SRC

* Keybindings
*** Remap Mac Fn key to super key =(s- )=
Doesn't work in tty mode, must use =C-x @ s= and then the key.
#+BEGIN_SRC emacs-lisp
  (setq mac-function-modifier 'super)
#+END_SRC

*** Bind ansi-term command to =s-t=
Doesn't work in tty mode, must use =C-x @ s t=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-t") 'ansi-term)
#+END_SRC

*** Fix some stupid failed binding to =backtab= key in Mac OS console mode
See https://stackoverflow.com/questions/3518846/shift-tab-produces-cryptic-error-in-emacs.
#+BEGIN_SRC emacs-lisp
  (add-hook 'term-setup-hook
	    (lambda () (define-key input-decode-map "\e[Z" [backtab])))
#+END_SRC

*** Bind =ibuffer= to the normal buffer list key
ibuffer is a /better/ interactive buffer list that allows deleting buffers and switching buffers in the same window.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

*** Bind my function =config-visit= defined below to =M-s=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
*** Bind my function =config-reload= defined below to =M-r=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
*** Bind my function =split-and-follow-horizontally=.
Bind to the default split horizontally key =C-x 2=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
#+END_SRC

*** Bind my function =split-and-follow-vertically=.
Bind to the default split vertically key =C-x 3=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
*** Bind my function =kill-whole-word=
Bind to the key =C-c w=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c w") 'kill-whole-word)
#+END_SRC
*** Bind my function =copy-whole-line=
Bind to the key =C-c l=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'copy-whole-line)
#+END_SRC
*** Bind my function =kill-current-buffer=
Bind it to the default =kill-buffer= keybinding =C-x k=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC
* Installed Packages
These packages are installed via =use-package=
*** Install & run =exec-path-from-shell=
On OS X, an Emacs instance started from the graphical user interface will have a different environment than a shell in a terminal window, because OS X does not run a shell during the login. Obviously this will lead to unexpected results when calling external utilities like make from Emacs. This library works around this problem by copying important environment variables from the user's shell.
See https://github.com/purcell/exec-path-from-shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :init (when (memq window-system '(mac ns x))
	    (exec-path-from-shell-initialize)))
#+END_SRC

*** Add =which-keys= package
    
This package provides a pop-up menu of command key completions when keys are pressed interactively in the minibuffer.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode))
#+END_SRC

*** Install & use =smex= (from MELPA)
This package provides command completion in the minibuffer after typing =M-x=.
#+BEGIN_SRC emacs-lisp
  (use-package smex
       :ensure t
       :init (smex-initialize)
       :bind
       ("M-x" . smex))
#+END_SRC
*** Install & use =avy= (from MELPA)
This package provides a way to quickly go to a character in the visible buffer by typing =M-s=.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC
*** Install & use =cider= (from MELPA)
=cider= is the /clojure integrated development environment/ (https://github.com/clojure-emacs/cider). We're only going to use the melpa stable version.
Initialize the REPL to suppress the verbose help banner when opened, and bind clear the REPL screen to =C-c C-l= key.
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t
    :pin melpa-stable
    :init (setq cider-repl-display-help-banner nil)
    :bind ("C-c C-l" . cider-repl-clear-buffer))
#+END_SRC
*** Install & use =sudo-edit= (from MELPA)
=sudo-edit= allows editing write protected files by first doing =sudo= before visting the file
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC
* Installed Modes
These modes are installed like packages via =use-package=
*** Install & use =markdown-mode= (from MELPA)
This package provides a major mode for editing markdown files. It requires the =markdown= command be installed via homebrew.
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "/usr/local/bin/markdown"))
#+END_SRC

*** Install & use =ido-vertical-mode=
This package makes the IDO mode completions in the minibuffer vertical rather than the default horizontal.
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init (setq ido-vertical-define-keys 'C-n-and-C-p-only)
	  (ido-vertical-mode 1))
#+END_SRC

*** Paredit
This minor mode makes dealing with parenthesis and lisp expressions much easier. Here, we enable it for
=clojure-mode= and =elisp-mode= major modes only.
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :pin melpa-stable
    :hook ((clojure-mode
	    emacs-lisp-mode
	    cider-repl-mode) . enable-paredit-mode))
#+END_SRC
*** Presentation Mode
This minor mode allows increasing/decreasing the font size in /all/ buffers. It can be run
on-demand: =M-x presentation-mode=. See https://github.com/zonuexe/emacs-presentation-mode.
#+BEGIN_SRC emacs-lisp
  (use-package presentation
    :ensure t
    :pin melpa-stable)
#+END_SRC
* UI Customizations
*** Set geometry of all emacs frames
Top-left corner of initial frame will be 50 pixels down from the top margin and 250 pixels right from the left margin. It also makes the window size 45 x 112 characters.
#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist '((top . 50) (left . 250) (width . 112) (height . 45)))
#+END_SRC
*** Turn off graphical tool-bar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

*** Turn off right scroll-bar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC

*** Turn off top menu bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC

*** Turn on line numbering in all buffers that support it
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
#+END_SRC

*** Turn on parenthesis matching mode
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

*** Turn on line highlight mode only in GUI mode
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode))
#+END_SRC
* Mode Line
*** Turn on column mode display of (line,col) in mode line
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC
* Terminal
*** Make bash the default shell for ansi-term
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

* Global Variables
*** Turn off emacs start screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

*** Turn off aggressive vertical scrolling
#+BEGIN_SRC  emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

*** Turn off annoying bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

*** Turn off auto-saving
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
#+END_SRC

*** Turn off stupid auto-backups
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

*** Edit src snippets in same window in org-mode
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
*** Set default fill column
Set the default column to 100 where emacs will attempt to auto-fill in those modes that support it.
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 100)
#+END_SRC
* Yes/No Prompt
*** Replace 'yes-or-no' prompts everywhere with 'y-or-n' prompts
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* IDO Mode
*** Set some default preferences
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
#+END_SRC
*** Enable =ido-mode=
#+BEGIN_SRC emacs-lisp
  (ido-mode 1)
#+END_SRC

* Config edit/reload
*** Edit this config file
This function is bound to a key mapping above.
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+END_SRC

*** Reload configs on demand
This function is bound to a key mapping above.
#+BEGIN_SRC emacs-lisp
    (defun config-reload ()
      (interactive)
      (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC
* Word Manipulation
*** kill whole word
Kill the entire word (both backwards and forwards) that is under the point.
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
#+END_SRC
* Line Manipulation
*** Copy whole line
Copy the line containing the point to the kill ring.
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
#+END_SRC
* Buffers
*** Always kill the current buffer
Override default emacs and =ido-mode= functionality to prompt for the buffer to kill, and just go
ahead and kill the current one. It will still prompt for confirmation if the buffer is unsaved.
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
#+END_SRC
* Window Splitting
*** Split window horizontally & put point in new window
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
#+END_SRC

*** Split window vertically & put point in new window
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+END_SRC
* Mode Hooks
*** =prog-mode=
The parent major mode for all programming language modes is =prog-mode=. Here we add the =subword-mode= minor mode to
this mode, which will allow navigation by word commands to respect camel-case words. In other words, camel-case boundaries
of identifiers will form "word" boundaries in all programming language files with this setting enabled.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (subword-mode 1)))
#+END_SRC
*** =text-mode=
In text mode, you generally want to auto-wrap or "auto-fill" lines of text, so this makes that happen but only in =text-mode= and its derivatives.
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

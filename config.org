#+TITLE: BSL's Customized Emacs
#+AUTHOR: Brian S. Lemberger
#+OPTIONS: toc:1
#+OPTIONS: num:nil

* Installation
Clone into the =.emacs.d= folder created by Emacs
#+BEGIN_SRC bash 
  git clone git@github.com:blemberger-b/emacs-config.git ~/.emacs.d
#+END_SRC
When Emacs is opened, it will download the specified packages (with their dependencies) and
apply the customizations from *init.el* and this file.  
* Custom Packages & Modes
These packages here and elsewhere are installed via [[https://github.com/jwiegley/use-package][use-package]]. From time to time, you should check
for updates using the command =M-x package-list-packages=, which will tell you which packages have
updates available and prompt to upgrade them.
** Install & use =paradox= for package listing
A better tool to use for listing and updating packages than the default =list-packages=. See the
[[https://github.com/Malabarba/paradox][project page]] for more info. Setting =paradox-github-token= supposedly turns off the
starring/unstarring of github repos functionality.
#+begin_src emacs-lisp
  (use-package paradox
    :config (paradox-enable)
    :custom (paradox-github-token t))
#+end_src
** Install & use =sudo-edit= (from MELPA)
=sudo-edit= allows editing write protected files by first doing =sudo= before visting the
file. Invocation is done with =C-c M-e= as bound below.
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :custom
    (auth-source-save-behavior nil "Never save the auth file, always prompt for password"))
#+END_SRC
** Recent Files
Emacs does not keep track of recently found files by default, so turn it on, and set some
reasonable defaults.
#+begin_src emacs-lisp
  (use-package recentf
    :config
    (setq recentf-max-saved-items 100
          recentf-exclude '("ido.last" "~/.cache/.*"))
    (recentf-mode 1))
#+end_src
** Dashboard
The =dashboard= package allows setting a better initial buffer when Emacs opens. See [[https://github.com/emacs-dashboard/emacs-dashboard][here]] for info
and configuration values. We display recent *projectile* projects and recent files. We exclude files
under =.git= directories and from the recent files list that get treated as edited by the package
manager for some reason.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (setq recentf-exclude '(".*autoloads\.el" ".*\.gz" "TAGS" ".*/\.git/.*"))
    (setq dashboard-startup-banner 'logo)
    (dashboard-setup-startup-hook)
    :custom
    (dashboard-page-separator "\n\f\n")
    (dashboard-projects-backend 'projectile)
    (dashboard-items '((projects . 5)
                       (recents . 10)))
    (dashboard-banner-logo-title
     "The more I learn about people, the more I like my dog\t--Mark Twain")
    (dashboard-set-footer nil))
#+END_SRC
** Install & use =markdown-mode= (from MELPA)
This package provides a major mode for editing markdown files. It requires the =markdown= command be
installed via homebrew.
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "/usr/local/bin/markdown"))
#+END_SRC
** Install & use =yaml-mode=
Allows efficient editing of YAML files. We want subword mode in this mode.
#+begin_src emacs-lisp
  (use-package yaml-mode
    :defer t
    :commands (yaml-mode)
    :hook (yaml-mode . subword-mode))
#+end_src
** PlantUML
[[https://github.com/skuro/plantuml-mode][plantuml-mode]] is a custom package for editing and viewing [[https://plantuml.com/][PlantUML]] diagrams. To begin using this
package, you must first install the executable *plantuml* package. For example, on a Mac: =brew
install plantuml=. The package will find the executable on the system PATH. This configuration also
associates =*.puml= files with =puml-mode=.
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :pin melpa
    :custom
    (plantuml-default-exec-mode 'executable)
    :config
    ;; Default .svg types won't work on Mac OS Ventura due to Emacs 28 bug
    (when (memq window-system '(mac ns))
      (setq plantuml-output-type "png"))
    :mode ("\\.puml\\'" . plantuml-mode))
#+end_src
** URL Encoding/Decoding
[[https://github.com/buzztaiki/urlenc-el][urlenc]] is a package that provides for encoding and decoding URLs to/from their hex representations.
#+begin_src emacs-lisp
  (use-package urlenc
    :pin melpa)
#+end_src
** Presentation Mode
This minor mode allows increasing/decreasing the font size in /all/ buffers. It can be run
on-demand: =M-x presentation-mode=. See [[https://github.com/zonuexe/emacs-presentation-mode][here]].
#+BEGIN_SRC emacs-lisp
  (use-package presentation
    :defer t
    :pin melpa-stable)
#+END_SRC
** Golden ratio screen scrolling
Scroll by 61.8% of the current screen height when using =C-v= and =M-v=.
#+begin_src emacs-lisp
  (use-package golden-ratio-scroll-screen
    :pin melpa
    :bind (([remap scroll-down-command] . 'golden-ratio-scroll-screen-down)
           ([remap scroll-up-command] . 'golden-ratio-scroll-screen-up)
           ([remap evil-scroll-page-up] . 'golden-ratio-scroll-screen-down)
           ([remap evil-scroll-page-down] . 'golden-ratio-scroll-screen-up)))
#+end_src
* Global Settings
** Install & run =exec-path-from-shell=
On Mac OS, an Emacs instance started from the graphical user interface will have a different
environment than a shell in a terminal window, because OS X does not run a shell during the login.
Obviously this will lead to unexpected results when calling external utilities like *make* from
Emacs. This library works around this problem by copying important environment variables from the
user's shell. See [[https://github.com/purcell/exec-path-from-shell][here]].

=exec-path-from-shell-arguments= set to =nil= will cause =exec-path-from-shell= to not run an
interactive shell, which will cause Emacs to startup faster and only use settings from =.bash_profile=.
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :init (when (memq window-system '(mac ns x))
            (setq exec-path-from-shell-arguments nil)
            (exec-path-from-shell-initialize))
    :config (when (memq window-system '(mac ns))
              (setenv "JAVA_CMD")))       ;Unset JAVA_CMD to keep CIDER's lein from using it
#+END_SRC
** Default to TLS 1.3
Apparently, Emacs 27.2 on Mac OS does not use the correct version of TLS for https connections that
the =package-list-package= command needs, leading to errors described [[https://emacs.stackexchange.com/questions/68288/error-retrieving-https-elpa-gnu-org-packages-archive-contents][here]]. This is the fix
described there.
#+begin_src emacs-lisp
  (when (and (equal emacs-version "27.2")
             (eql system-type 'darwin))
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
#+end_src
** Turn off emacs start screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** Turn off annoying bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Turn off auto-saving
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
#+END_SRC

** Backup files go in a dedicated directory
Emacs can automatically create backup files. This tells Emacs to put all backups in
~/.emacs.d/backups. More info [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html][here]].
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . ,
                                  (concat user-emacs-directory "backups"))))
#+end_src

** Vertical Scrolling
Scroll up to this many lines to bring point back on screen.
#+begin_src emacs-lisp
  (setq scroll-conservatively 20)
#+end_src
** Set default fill column
Set the default column to 100 where emacs will attempt to auto-fill in those modes that support it.
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 100)
#+END_SRC
** No tab characters
Make indentation use space characters only and not tab characters. Note that some major modes
override this behavior.
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** Set default tab width
Set the number of spaces corresponding to a tab character, unless overridden by buffers or modes.
#+begin_src emacs-lisp
  (setq-default tab-width 2)
#+end_src

** Set =whitespace-mode= highlighting column
The value of this variable determines the column number for lines in buffers viewed in
=whitespace-mode= are shown in highlighted color. =nil= means to use the value of =fill-column=.
#+begin_src emacs-lisp
  (setq whitespace-line-column nil)
#+end_src
** Tab key behavior regarding indentation
The value of this variable determines how the tab key behaves when struck. This setting only does
indentation when the point is at the beginning of a line.
#+begin_src emacs-lisp
  (setq-default tab-always-indent nil)
#+end_src
** Replace 'yes-or-no' prompts everywhere with 'y-or-n' prompts
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Set directory listing options
Both verbose and brief directory listings using =C-x C-d= should list hidden as well as visible
files.
#+begin_src emacs-lisp
  (setq list-directory-brief-switches "-la")
  (setq list-directory-verbose-switches "-CFa")
#+end_src
** Remap Mac Fn key to super key =(s- )=
Doesn't work in tty mode, must use =C-x @ s= and then the key.
#+BEGIN_SRC emacs-lisp
  (setq mac-function-modifier 'super)
#+END_SRC
** Fix some stupid failed binding to =backtab= key in Mac OS console mode
See [[https://stackoverflow.com/questions/3518846/shift-tab-produces-cryptic-error-in-emacs][this explanation]].
#+BEGIN_SRC emacs-lisp
  (add-hook 'term-setup-hook
            (lambda () (define-key input-decode-map "\e[Z" [backtab])))
#+END_SRC
** iterm2 Mac OS console mode fixes
Emacs generally has problems with the Control-Meta-Shift combination key bindings in console
mode. This is due to terminal emulators on all systems, not just Mac OS, not able to process the
escape sequences and pass them through to emacs. Some of these problems can be fixed by modifying
the terminal emulator program to send the expected escape sequences for the desired key-presses that
emacs is expecting. A writeup for how to fix some of these key bindings in Mac OS iterm2 is discussed
[[https://emacs.stackexchange.com/a/45624][here]]. The decimal ASCII codes to be used for whatever bindings
are desired can be looked up in any standard ASCII table.

For example, to map =C-,= in *iterm2* so that it works when emacs is run in console mode, I
configured my iterm2 profile to map =^,= to the escape sequence =[44;5u= since comma is ASCII code 44.
** Save clipboard strings into kill ring before replacing them
When one selects something in another program to paste it into Emacs, but kills something in
Emacs before actually pasting it, this selection is gone unless this variable is non-nil.
#+begin_src emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+end_src
** Save place in opened files
When you visit a file, point goes to the last place where it was when you previously visited the
same file. See [[https://www.emacswiki.org/emacs/SavePlace][here]].
#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src
** Regular Expression Builder
=re-builder= is a built-in emacs major mode for interactively building Regular Expressions. Set
the regexp syntax support to *pcre* (see below), which are the types of regexes that I use
most. For elisp type regexes, use =reb-change-syntax= to change the syntax to *string* syntax,
which prevents the need for escaping so many backslashes in the expression.
#+begin_src emacs-lisp
  (require 're-builder)
  (setq reb-re-syntax 'pcre)
#+end_src
** Perl Compatile Regular Expressions
The default regular expression handling in emacs is meant to support elisp, and as such is
somewhat limited. [[https://github.com/joddie/pcre2el][This package]] introduces support commands and built-in integration with
=re-builder= to support PCREs.
#+begin_src emacs-lisp
  (use-package pcre2el
    :pin melpa)
#+end_src
** Toggle whitespace-mode
=whitespace-mode= is useful for showing whitespace characters on the screen. Toggle it on or
off using =C-c w=.
* Custom Keybindings
** General
The [[https://github.com/noctuid/general.el][general]] package is useful for organizing custom keybindings.
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer bsl/control-c-definer
      :prefix "C-c")
    (general-create-definer bsl/meta-o-definer
      :prefix "M-o"))
#+end_src
** Vim Keybindings
[[https://evil.readthedocs.io/en/latest/index.html][Evil Mode]] will emulate =vim= keybindings in emacs, which are better.
#+begin_src emacs-lisp
  (use-package evil
    :after general
    :custom
    (evil-want-keybinding nil "Needed for evil-collection")
    (evil-move-beyond-eol t "Cursor can move one character beyond EOL")
    (evil-want-fine-undo "yes" "Undo undoes every little thing")
    (evil-undo-system 'undo-redo "Use Emacs v.8 undo/redo")
    (evil-want-C-i-jump nil "Don't override emacs default C-i & TAB key behavior")
    :config
    (evil-set-initial-state 'special-mode 'motion)
    (evil-set-initial-state 'comint-mode 'emacs)
    (evil-set-initial-state 'gud-mode 'emacs)
    (evil-set-initial-state 'cider-repl-mode 'emacs)
    (evil-set-initial-state 'term-mode 'emacs)
    (evil-set-initial-state 'dashboard-mode 'emacs)
    (evil-set-initial-state 'Info-mode 'emacs)
    (evil-mode 1)
    (general-def
      :states '(insert replace visual motion)
      "C-SPC" 'evil-normal-state
      "C-g" 'evil-normal-state)
    (general-def
      :states 'normal
      "C-m" 'evil-motion-state))
#+end_src
[[https://github.com/emacs-evil/evil-collection][Evil Collection]] is a community owned resource for providing evil-friendly keybindings for certain
other "emacs-like" modes.
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-want-unimpaired-p nil "Don't use evil-collection-unimpaired minor mode")
    :config
    (evil-collection-init 'dired))
#+end_src
** Repetitive Action Shortcuts
The [[https://github.com/abo-abo/hydra][hydra]] package allows commands to be bound to short keybindings (called "heads"). After the
command is invoked using the normal keybinding, repetitive invocations of the command can be
accomplished with a single key.
#+begin_src emacs-lisp
  (require 'hydra) ;; package is a dependency of ivy
#+end_src
** Keybindings
Bind some of the functions in this file to the =C-c= key prefix.
#+begin_src emacs-lisp
  (bsl/control-c-definer
    "l" 'bsl/copy-whole-line
    "s" 'whitespace-mode
    "v" 'bsl/halve-other-window-height
    "d" 'ediff-files
    "b" 'ediff-buffers
    "w" 'hydra-window-resize/body
    "x" 'goto-last-change
    "K" 'bsl/kill-all-buffers
    "r" 'counsel-recentf
    "h" 'list-command-history
    "M-e" 'sudo-edit)

  ;; Bindings for viewing and reloadig this file
  (bsl/control-c-definer
    :prefix "C-c c"
    "e" 'bsl/config-visit
    "r" 'bsl/config-reload)

  ;; Bindings for resizing and moving the frame
  (bsl/control-c-definer
    :prefix "C-c f"
    "s" 'hydra-frame-resize/body
    "m" 'hydra-frame-motion/body)

  ;; Bind s-u to revert-buffer command only in UI mode
  (general-define-key
   :predicate '(window-system)
   "s-u" 'revert-buffer)
#+end_src

* UI Customizations
** Set geometry of the initial emacs frame
Window size will be 40 characters tall x 157 characters wide.
#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist '((width . 141) (height . 40)))
#+END_SRC
** Font faces
Fonts are set in the =init.el= file rather than here, so that they can be customized using emacs
default =customize= functionality. The default font for Mac OS specified there, *Fira Code*, needs to be
downloaded separately. The following commands will do this on a Mac:
#+begin_example
  brew tap homebrew/cask-fonts
  brew install font-fira-code
#+end_example
** Turn off graphical tool-bar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

** Turn off native OS scroll bars on window frames
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
#+END_SRC

** Turn off top menu bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC

** Cursor blink
Set the cursor to always blink. This setting has no effect in TTY mode (the cursor is controlled
only by the terminal settings).
#+BEGIN_SRC emacs-lisp
  (setq blink-cursor-blinks 0)
#+END_SRC

** Full path in title bar
#+begin_src emacs-lisp
  (setq frame-title-format "%b (%f)")
#+end_src
** Turn on line numbering in all buffers that support it
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
#+END_SRC
** Beacon mode
Install and enable =beacon-mode= for better indicator when changing windows. See [[https://github.com/Malabarba/beacon][here]].
#+begin_src emacs-lisp
  (use-package beacon
    :pin melpa-stable
    :init (beacon-mode 1)
    :diminish beacon-mode
    :custom
    (beacon-blink-when-window-scrolls nil))
#+end_src
** Prettify Control-L
Emacs by default displays the form-feed (=C-l=) character as a literal "^L" character
sequence. Since this is ugly, this package changes it to a horizonal line. The package used here
is [[https://github.com/purcell/page-break-lines][page-break-lines]] because it works well with =dashboard-mode=. For some reason, it's not
enabled globally for text modes, so we enable it.
#+begin_src emacs-lisp
  (use-package page-break-lines
    :pin melpa
    :config (add-to-list 'page-break-lines-modes 'text-mode)
    (global-page-break-lines-mode)
    :diminish page-break-lines-mode)
#+end_src
* Minibuffer
** Completion
=ivy= is a better way than default emacs to handle command, filename, and buffer completion. To
install it, install the =counsel= package, which requires =ivy= as well as =swiper=.

Additionally, install [[https://github.com/Yevgnen/ivy-rich][ivy-rich]], which among other things, provides command descriptions in the
minibuffer when using =counsel-M-x= to run commands.
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map evil-normal-state-map
           ("/" . swiper)
           :map ivy-minibuffer-map
           ("RET" . ivy-alt-done)
           :map ivy-switch-buffer-map
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-d" . ivy-reverse-i-search-kill))
    :custom (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) ")
    :init
    (ivy-mode 1)
    :config
    (setq ivy-initial-inputs-alist nil)) ; Don't start searches with ^

  (use-package ivy-rich
    :requires ivy
    :pin melpa ; melpa-stable version currently has a bug
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :pin melpa
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . counsel-minibuffer-history)))
#+end_src
** M-x Enhancement
Emacs uses the  =M-x= keybinding to execute commands. This installs [[https://github.com/nonsequitur/smex][smex]], which works well with
=counsel-M-x= to show recent commands run in the minibuffer.
#+begin_src emacs-lisp
  (use-package smex
    :pin melpa-stable
    :init (smex-initialize))
#+end_src

** Add =which-key= package
This package provides a pop-up menu of command key completions when keys are pressed interactively
in the minibuffer. We also suppress it from showing up in the modeline. See [[https://github.com/justbur/emacs-which-key][here]].
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode)
#+END_SRC
** Allow Minibuffer To Become Huge
By default, the minibuffer will resize up to 25% of the frame. Unfortunately, some packages like
=counsel-projectile= display options in the minibuffer which take up more space than this and
which also don't allow scrolling the minibuffer. So allow the minibuffer to become 90% the size
of the containing frame:
#+begin_src emacs-lisp
  (setq max-mini-window-height 0.9)
#+end_src
* Mode Line
** Turn on column mode display of (line,col) in mode line
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC

** Spaceline
=spaceline= is a better mode line from the [[https://www.spacemacs.org/][spacemacs distribution]]. Use the spacemacs theme, but turn
off the file line-endings info segment in the mode line, which I don't find very useful.
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :pin melpa-stable
    :config
    (require 'spaceline-config)
    (spaceline-spacemacs-theme)
    (spaceline-toggle-buffer-encoding-abbrev-off))
#+END_SRC
** Diminish minor modes from the modeline
[[https://github.com/myrjola/diminish.el][diminish]] allows us to list the mode names that we don't want displayed in the modeline. We do
that in this file by using the =:diminish= keyword in =use-package= declarations that we want to
suppress, or by specifing them in the =config:= section.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :pin melpa-stable
    :config (diminish 'eldoc-mode))
#+END_SRC

* Kill Ring
** Turn on helpful kill ring pop-up menu and bind it to =M-y=
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
* Terminal
** Make bash the default shell for ansi-term
=bash= command will be located based on the =PATH= in the user's environment.
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** Bind ansi-term command
to =s-t=
Doesn't work in tty mode, must use =C-x @ s t=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-t") 'ansi-term)
#+END_SRC
** Turn off line numbers for shell terminals
#+begin_src emacs-lisp
  (add-hook 'term-mode-hook (lambda () (display-line-numbers-mode 0)))
#+end_src
* Org Mode
See [[https://orgmode.org/index.html][org-mode]].
** UI Tweaks
Replace the three dot ellipsis for collapsed headings (...) with a downward pointing triangle
character.
#+begin_src emacs-lisp
  (setq org-ellipsis " \u25bc")
#+end_src
Open all .org files with collapsed headlines. Since we are also using =save-place-mode=, the last
visited block will be opened.
#+begin_src emacs-lisp
  (setq org-startup-folded t)
#+end_src
** Navigation Tweaks
Make =C-a= and =C-e= keybindings to move to beginning/end of headlines.
#+begin_src emacs-lisp
  (setq org-special-ctrl-a/e t)
#+end_src
** Indentation
Activate =org-indent-mode= mode, which instead of inserting whitespace characters before each
non-headline line, puts virtual indentation in to line up the body of the text with headlines.
#+begin_src emacs-lisp
  (setq org-startup-indented t)
  (add-hook 'org-mode-hook (lambda () (diminish 'org-indent-mode)))
#+end_src
** Headline Bullets
Replace the native asterisk headline   format string (e.g. =***=) with unicode bullet characters
#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
** Common Tags
These tags will always appear in =org-mode= tag list commands (such as =counsel-org-tag=)
whether the tags are already in the file or not.
#+begin_src emacs-lisp
  (setq org-tag-alist
        '(("work" . ?w)
          ("home" . ?h)
          ("docs" . ?d)))
#+end_src
** Agenda Settings
These settings apply to =org-agenda= views.
*** Start =org-mode= with agenda logging.
#+begin_src emacs-lisp
  (setq org-agenda-start-with-log-mode t)
#+end_src
*** Define directories that have agenda files
Some of these paths won't exist on all of my computers, but that's OK, we're ignoring that with
a setting below.
#+begin_src emacs-lisp
  (let ((one-drive-dir "~/OneDrive - Bayer"))
    (setq org-agenda-files (list
                            (concat one-drive-dir "/work-notes")
                            "~/training/emacs/org-mode")))
#+end_src
*** Ignore non-existent agenda files & file paths
#+begin_src emacs-lisp
  (setq org-agenda-skip-unavailable-files t)
#+end_src
*** Add log statements on activities with timestamps.
#+begin_src emacs-lisp
  (setq org-log-done 'time)
#+end_src
*** Put org log in the drawer.
#+begin_src emacs-lisp
  (setq org-log-into-drawer t)
#+end_src
*** Define custom workflow keywords
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")))
#+end_src
*** Define custom agenda views
    Create a dashboard and other agenda views of my own. See this [[https://orgmode.org/manual/Custom-Agenda-Views.html#Custom-Agenda-Views][topic]] in the =org-mode= manual for more information.
    #+begin_src emacs-lisp
      (setq org-agenda-custom-commands
            '(("d" "Dashboard"
               ((agenda "" ((org-deadline-warning-days 7)))
                (todo "NEXT"
                      ((org-agenda-overriding-header "Next Tasks")))
                (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))
              ("W" "Work Non-Doc Tasks" tags-todo "+work-docs")
              ("e" "Low Effort Tasks" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
               ((org-agenda-max-todos 20)
                (org-agenda-overriding-header "Low Effort Tasks")))))
    #+end_src
** Htmlize
Install =htmlize= package to allow exporting =org-mode= files in html format
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :defer t
    :pin melpa-stable)
#+END_SRC
** Source snippet for emacs-lisp
In =org-mode=, the key combination =C-c C-, el= will insert an *emacs-lisp* block.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '( "el" . "src emacs-lisp"))
#+END_SRC
** Presentations
[[https://github.com/takaxp/org-tree-slide][org-tree-slide]] mode can be used to create an interactive slide show in =org-mode=. To start a
presentation, do =M-x org-tree-slide-mode=.
#+begin_src emacs-lisp
  (use-package org-tree-slide
    :defer t
    :pin melpa-stable
    :custom
    (org-tree-slide-in-effect t)
    (org-tree-slide-activate-message "presentation started")
    (org-tree-slide-deactivate-message "presentation ended")
    (org-tree-slide-header t)
    (org-tree-slide-breadcrumbs " // ")
    (org-image-actual-width nil)
    (org-tree-slide-simple-profile))
#+end_src

** Custom =org-mode= keybindings
Globally enabled keybindings specific for =org-mode=:
#+begin_src emacs-lisp
  (bsl/meta-o-definer
    "l" 'org-store-link
    "a" 'org-agenda
    "c" 'org-capture
    "SPC" 'org-babel-mark-block)
#+end_src
Keybindings only enabled in =org-mode= buffers:
#+begin_src emacs-lisp
  (bsl/meta-o-definer
    :keymaps 'org-mode-map
    "T" 'counsel-org-tag
    "t" (defhydra my-org-toggles ()
          "My org-mode toggles"
          ("l" org-toggle-link-display "toggle hyperlinks")))
#+end_src
* Dired
For directory editing & file system operations within emacs.
** Enable =dired-x=
Extensions for =dired-mode= that are pre-installed, but not enabled by default, so enable them. For
example, to jump to the currently open file in dired-x, type =C-x C-j=.
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-load-hook (lambda () (load "dired-x")))
  (general-def "C-x C-j" 'dired-jump)
  (general-def "C-x 4 C-j" 'dired-jump-other-window)
#+END_SRC
Force isearch operations in dired buffers to only search in filenames.
#+begin_src emacs-lisp
  (setq dired-isearch-filenames t)
#+end_src
* Config edit/reload
** Edit this config file
Define a custom function to do this.
#+BEGIN_SRC emacs-lisp
  (defun bsl/config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+END_SRC
** Reload configs on demand
Define a custom function to do this.
#+BEGIN_SRC emacs-lisp
  (defun bsl/config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC
* Moving Point
** Move the point to where I really mean to (MWIM)
This package overrides the default beginning/end of line motion actions to more convenient
motion actions for programming modes. It's always on, so hopefully it doesn't interfere with
non-programming modes too much.
#+BEGIN_SRC emacs-lisp
  (use-package mwim
    :pin melpa-stable
    :bind (("C-a" . mwim-beginning)
           ("C-e" . mwim-end)))
#+END_SRC

** Go To Last Change
Use a key combination (defined elsewhere here) to return to the last edit location in the active buffer.
#+BEGIN_SRC emacs-lisp
  (use-package goto-last-change
    :pin melpa-stable)
#+END_SRC

* Line Manipulation
** Copy whole line
Copy the line containing the point to the kill ring. If invoked with a prefix argument, only copy
the line beginning after any whitespace.
#+begin_src emacs-lisp
  (defun bsl/copy-whole-line (arg)
    (interactive "P")
    (save-excursion
      (kill-new
       (buffer-substring
        (if arg
            (progn                          ; if arg is given ignore whitespace at front of line
              (back-to-indentation)
              (point))
          (point-at-bol))                 ; if no arg, take exact beginning of line
        (point-at-eol))))
    (message "Line copied"))
#+end_src
* Buffers
** Bind =ibuffer= to the normal buffer list key
ibuffer is a /better/ interactive buffer list that allows deleting buffers and switching buffers in
the same window.
#+BEGIN_SRC emacs-lisp
  (general-def "C-x C-b" 'ibuffer)
#+END_SRC
** Always kill the current buffer
Override default emacs and =ido-mode= functionality to prompt for the buffer to kill, and just go
ahead and kill the current one. It will still prompt for confirmation if the buffer is unsaved.
#+BEGIN_SRC emacs-lisp
  (defun bsl/kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
#+END_SRC
Bind it to the default =kill-buffer= keybinding =C-x k=.
#+BEGIN_SRC emacs-lisp
  (general-def "C-x k" 'bsl/kill-current-buffer)
#+END_SRC

** Kill all buffers
This command will kill all killable buffers. If any buffers have unsaved changes, you'll be prompted
to confirm. It will then open the =*dashboard*= buffer.
#+BEGIN_SRC emacs-lisp
  (defun bsl/kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list))
    (dashboard-refresh-buffer)
    (delete-other-windows))
#+END_SRC

* Auto-Complete
For completion within buffers, we'll use the [[https://company-mode.github.io/][company package]], enabled in all modes. Bind the manual
completion command to =M-/=, same as default emacs =dabbrev-expand=.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :pin gnu
    :config
    (global-company-mode)
    :bind ("M-/" . company-complete)
    :diminish)
#+END_SRC

* Windows
** Easily navigate between windows
The [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Convenience.html][windmove]] built-in package, that is enabled by default, allows the use of Shift-arrow-key
keybindings to move focus to the window in that direction (if there is one). Need to explicitly
enable these default keybindings.

*** =windmove-default-keybindings=
Binds S-<arrow-key> to move focus between windows.
*** =windmove-display-default-keybindings=
Binds S-<meta>-<arrow-key> to tell emacs in which new window to put the buffer created by the next command.
*** =windmove-swap-states-default-keybindings=
Binds S-<super>-<arrow-key> to move the contents of the current window to the window in that direction.

#+begin_src emacs-lisp
  (require 'windmove)
  (windmove-default-keybindings)
  (windmove-display-default-keybindings)
  (windmove-swap-states-default-keybindings)
#+end_src
*** Set option to make new buffers appear in directed window
#+begin_src emacs-lisp
  (setq switch-to-buffer-obey-display-actions 1)
#+end_src
** Keep track of window placements for each frame
Built-in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Convenience.html][winner-mode]] provides the ability to toggle previous/next window arrangements for a
frame using =C-c <left>= and =C-c <right>=.
#+begin_src emacs-lisp
  (winner-mode)
#+end_src
** Split window horizontally & put point in new window
#+BEGIN_SRC emacs-lisp
  (defun bsl/split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
#+END_SRC
Bind to the default split horizontally key =C-x 2=.
#+BEGIN_SRC emacs-lisp
  (general-def "C-x 2" 'bsl/split-and-follow-horizontally)
#+END_SRC
** Split window vertically & put point in new window
#+BEGIN_SRC emacs-lisp
  (defun bsl/split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+END_SRC
Bind to the default split vertically key =C-x 3=.
#+BEGIN_SRC emacs-lisp
  (general-def "C-x 3" 'bsl/split-and-follow-vertically)
#+END_SRC
** Halve other window height
Tip from [[https://stackoverflow.com/questions/4987760/how-to-change-size-of-split-screen-emacs-windows][here]].
#+BEGIN_SRC emacs-lisp
  (defun bsl/halve-other-window-height ()
    "Expand current window to use half of the other window's lines."
    (interactive)
    (enlarge-window (/ (window-height (next-window)) 2)))
#+END_SRC
** Custom window keybindings
#+begin_src emacs-lisp
  (defhydra hydra-window-resize ()
    "Window resize"
    ("s" shrink-window "shorter")
    ("t" enlarge-window "taller")
    ("n" shrink-window-horizontally "narrower")
    ("w" enlarge-window-horizontally "wider"))
#+end_src
** Auto dim other windows
Use the incorrectly named =auto-dim-other-buffers= package to dim windows other than the active
one. Do not enable this in tty mode.
#+begin_src emacs-lisp
  (use-package auto-dim-other-buffers
    :pin melpa
    :custom
    (auto-dim-other-buffers-dim-on-switch-to-minibuffer nil "Try to keep from dimming window on switch to minibuffer")
    :hook (after-init . (lambda () (when window-system
                                     (auto-dim-other-buffers-mode t)))))
#+end_src
* Frames
The functions in this section were inspired by the [[https://www.emacswiki.org/emacs/frame-cmds.el][frame-cmds]] Emacs Wiki library.

** Adjust Frame Parameter
Helper function used to adjust frame size and position.
#+begin_src emacs-lisp
  (defun bsl/adjust-frame-param (op param &optional increment frame)
    "Adjust the PARAM of FRAME (default: selected-frame) by INCREMENT using OP.
    INCREMENT is in lines (characters).
    Interactively, it is given by the prefix argument."
    (if (display-graphic-p)
        (set-frame-parameter frame param (funcall op (frame-parameter frame param) increment))))
#+end_src

** 1.5 x Frame Width
Makes the current frame 1.5 times as wide. I wrote this.
#+begin_src emacs-lisp
  (defun bsl/one-and-a-half-frame-width (&optional frame)
    "Make the width of FRAME one and a half times wider (default: selected-frame)."
    (interactive)
    (if (display-graphic-p)
        (set-frame-width frame (truncate (* (frame-width frame) 1.5)))))
#+end_src

** 2/3 Frame Width
Makes the current frame 2/3 as wide. I wrote this.
#+begin_src emacs-lisp
  (defun bsl/two-thirds-frame-width (&optional frame)
    "2/3 the width of FRAME (default: selected-frame)."
    (interactive)
    (if (display-graphic-p)
        (set-frame-width frame (truncate (/ (frame-width frame) 1.5)))))
#+end_src

** Moving the Frame
Moves the current frame up/down or left/right.
#+begin_src emacs-lisp
  (defun bsl/move-frame (op param &optional frame)
    "Adjust a motion-type PARAM of FRAME (default: selected-frame) by 15 pixels using OP."
    (let ((curr-top (frame-parameter frame param))
          (increment 15))
      (if (and (eq op '-) (< curr-top increment))
          (set-frame-parameter frame param 0)
        (bsl/adjust-frame-param op param increment frame))))
#+end_src
** Frame resize keybindings
Makes the current frame vertically/horizontally bigger/smaller incrementally.
#+begin_src emacs-lisp
  (defhydra hydra-frame-resize ()
    "Frame resize"
    ("s" (lambda (&optional increment)
           (interactive "p")
           (bsl/adjust-frame-param '- 'height increment nil)) "shorter")
    ("t" (lambda (&optional increment)
           (interactive "p")
           (bsl/adjust-frame-param '+ 'height increment nil)) "taller")
    ("n" (lambda (&optional increment)
           (interactive "p")
           (bsl/adjust-frame-param '- 'width increment nil)) "narrower")
    ("w" (lambda (&optional increment)
           (interactive "p")
           (bsl/adjust-frame-param '+ 'width increment nil)) "wider")
    ("]" bsl/one-and-a-half-frame-width "1.5 x width")
    ("[" bsl/two-thirds-frame-width "2/3 width"))
#+end_src

** Frame motion keybindings
#+begin_src emacs-lisp
  (defhydra hydra-frame-motion ()
    "Frame motion"
    ("<up>" (lambda ()
              (interactive)
              (bsl/move-frame '- 'top)) "up")
    ("<down>" (lambda ()
                (interactive)
                (bsl/move-frame '+ 'top)) "down")
    ("<left>" (lambda ()
                (interactive)
                (bsl/move-frame '- 'left)) "left")
    ("<right>" (lambda ()
                 (interactive)
                 (bsl/move-frame '+ 'left)) "right"))
#+end_src

* Text Mode
** =text-mode=
In text mode, you generally want to auto-wrap or "auto-fill" lines of text, so this makes that
happen but only in =text-mode= and its derivatives. We also enable =flyspell-mode= minor mode in all
text modes to get spellchecking functionality.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook (lambda () (turn-on-auto-fill)
                              (flyspell-mode)))
#+END_SRC
*** Note: This requires that the =ispell= program be installed in the path of the local system.
* XML Mode
** Turn off flyspell
=nxml-mode= is the modern major mode for editing xml structured documents. It inherits from
=text-mode=, so turning off =flyspell-mode= in order to get completion at point functionality.
#+begin_src emacs-lisp
  (add-hook 'nxml-mode-hook (lambda () (flyspell-mode 0)))
#+end_src
=sh-mode= is the mode for editing shell scripts (i.e. bash). For some reason flyspell is enabled by
default, so disable it.
#+begin_src emacs-lisp
  (add-hook 'sh-mode-hook (lambda () (flyspell-mode 0)))
#+end_src
** Prettify
This creates a keyboard macro that "prettifies" (i.e. re-indents and refomats) XML documents. To run
it, enter =M-x bsl/xml-prettify=.
*Note:* This command requires that the *xmllint* command is installed and available in the local
PATH. It comes pre-installed as part of *libxml* on most Mac OS systems.
#+begin_src emacs-lisp
  (defun bsl/xml-prettify ()
    (interactive)
    (shell-command-on-region
     (buffer-end 0)
     (buffer-end 1)
     "xmllint --format -"
     t
     t)
    )
#+end_src
* Protobuf Mode
=protobuf-mode= is a major mode distributed by the makers of [[https://developers.google.com/protocol-buffers/][protocol buffers]].
#+begin_src emacs-lisp
  (use-package protobuf-mode
    :ensure t
    :defer t)
#+end_src
* LaTeX
=LaTeX= mode comes built-in to emacs as a major mode that is automatically active for files ending
with =.tex= and that have =LaTeX= specific header information in them.

The =latex= command to create a =.dvi= file can be invoked on a buffer with the *tex-buffer* =C-c C-b=
command. The subsequent =.dvi= file can be converted to =.pdf= by using the *tex-view* =C-c C-v=
command. Here we configure *tex-view* to convert to PDF format.
#+begin_src emacs-lisp
  (setq tex-dvi-view-command "pdflatex")
  (setq tex-print-file-extension ".pdf")
#+end_src
* Programming Modes
** =prog-mode= hook
The parent major mode for all programming language modes is =prog-mode=. Here we add the
=subword-mode= minor mode to this mode, which will allow navigation by word commands to respect
camel-case words. In other words, camel-case boundaries of identifiers will form "word" boundaries
in all programming language files with this setting enabled. Also, turn on spell-checking in
comments and literal strings using =flyspell-prog-mode= (This requires that the =ispell= program be
installed in the path of the local system).

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda ()
                              (subword-mode 1)
                              (diminish 'subword-mode)
                              (flyspell-prog-mode)
                              (diminish 'flyspell-mode)))
#+END_SRC

** Turn on parenthesis matching mode
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** Paredit
This [[https://paredit.org][minor mode]] makes dealing with parenthesis and lisp expressions much easier. Here, we enable it
for some lisp major modes only. =paredit-newline= does some electric indenting after newlines if
=electric-indent-mode= is enabled (which it is by default). Also remap the s-expression /slurp/
and /barf/ commands to keybindings that work in both GUI and TTY.
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :pin melpa-stable
    :hook ((clojure-mode
            emacs-lisp-mode
            scheme-mode) . enable-paredit-mode)

    :bind (:map paredit-mode-map
                (("C-c )" . paredit-forward-slurp-sexp)
                 ("C-c (" . paredit-backward-slurp-sexp)
                 ("C-c M-)" . paredit-forward-barf-sexp)
                 ("C-c M-(" . paredit-backward-barf-sexp)
                 ("C-j" . paredit-newline)
                 ("M-r" . paredit-raise-sexp))))
#+END_SRC

** Colorful matching delimiters
This package changes the color of corresponding pairs of parenthesis and brackets. Here, we enable
it only in prog-mode and its descendants, and in =cider-repl-mode=.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :pin melpa-stable
    :hook (('prog-mode . rainbow-delimiters-mode-enable)
           ('cider-repl-mode . rainbow-delimiters-mode-enable))
    )
#+END_SRC

** Language server mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :config
    (lsp-enable-which-key-integration t))
#+end_src
* Javascript
** Javascript/Typescript Language Server
Javascript support in emacs uses a [[https://emacs-lsp.github.io/lsp-mode/page/lsp-typescript/][typescript language server]] for much functionality.
*Note:* As described at the above link, this package requires that the
=typescript-language-server= be installed locally via =npm=.
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.js\\'"
    :defer t
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src
* Python
** Poetry Support
[[https://python-poetry.org/docs/][Poetry]] is a system that can be used to manage python virtual environments, packaging, and
dependencies. It is installed on the OS using that OS's packaging tools. The =Elpy= IDE package
needs =poetry= to manage the virtual environment that it uses for its IDE features. Install [[https://github.com/cybniv/poetry.el][Emacs integration]]
for it:
#+begin_src emacs-lisp
  (use-package poetry
   :ensure t
   :after elpy
   :hook (elpy-mode . poetry-tracking-mode)
   :bind (:map python-mode-map
          ("C-c y" . poetry))) ; Bind a key to poetry's dispatcher (menu mode)
#+end_src
** Elpy
[[https://elpy.readthedocs.io/en/latest/index.html][Elpy]] is a package that adds IDE functionality for Python projects. Defer loading it until I'm
working on a python buffer, and diminish some minor mode indicators that come with =elpy=.
#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :defer t
    :init
    (advice-add 'python-mode :before
                (lambda ()
                  (elpy-enable)
                  (diminish 'flymake-mode)
                  (diminish 'highlight-indentation-mode)))
    :custom
    (elpy-rpc-virtualenv-path 'current "Use virtualenv managed by poetry"))
#+end_src
* Clojure
In addition to [[Programming Modes][Programming Modes]] settings, the following settings apply only to editing clojure files and buffers.
** Set indent mode for clojure buffers
Set the variable =clojure-indent-style= to the value =always-indent=. See [[https://github.com/clojure-emacs/clojure-mode#indentation-options][here]] for more info.
#+BEGIN_SRC emacs-lisp
  (setq clojure-indent-style 'align-arguments)
#+END_SRC
** =clojure-mode= customizations
- =comment-column= set to 0 to not force adding extra space after inline *;*
#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook (lambda () (setq-local comment-column 0)))
#+END_SRC
** Install & use =cider=
[[https://github.com/clojure-emacs/cider][CIDER]] is the /clojure integrated development environment/. We're only going to use the melpa stable
version.  Initialize some settings, and bind the command to clear the REPL screen to =C-c C-l=
key. Also set the following defaults:
- =cider-repl-display-help-banner= suppress the verbose help banner when opened
- =cider-eldoc-display-context-dependent-info= try to auto-complete function calls with in-scope
  parameters
- =cider-allow-jack-in-without-project= Suppress warning that the REPL gives when you're current
  buffer is not part of a leiningen project.
- =nrepl-log-messages= Log all request/response messages between cider and the =nrepl= server to a
  special buffer for debugging purposes
- =cider-use-overlays= controls whether evaluated results are shown in the original
  buffer. Here, we disable in TTY mode, because the fonts & colors are messy. Results will be on the
  status line.
- =cider-prompt-for-symbol= Here, we set this variable to only prompt for the symbol if the lookup
  for the symbol at point fails.
- =cider-repl-pop-to-buffer-on-connect= Display the REPL buffer on connect, but don't move focus to
  it.
- =cider-repl-wrap-history= Wrap when navigating history.
- =cider-repl-display-output-before-window-boundaries= Scroll the REPL buffer prompt down when
  output is displayed.
- =cider-lein-command= This is overridden because on some of my machines, some of my projects
  require a version of =lein= that is not compatible with CIDER. To make this work, on those systems
  I define the =CIDER_LEIN= environment variable to reference the full path of the =lein= command
  that works with CIDER.
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :pin melpa-stable
    :defer t
    :requires evil-collection
    :init
    (setq cider-repl-display-help-banner nil)
    (setq cider-eldoc-display-context-dependent-info t)
    (setq cider-allow-jack-in-without-project t)
    (setq nrepl-log-messages t)
    (setq cider-repl-result-prefix "=> ")
    (unless window-system (setq cider-use-overlays nil))
    (setq cider-prompt-for-symbol nil)
    (setq cider-repl-pop-to-buffer-on-connect 'display-only)
    (setq cider-repl-wrap-history t)
    (setq cider-repl-display-output-before-window-boundaries t)
    (let ((cider-lein-var (getenv "CIDER_LEIN")))
      (when cider-lein-var
        (setq cider-lein-command cider-lein-var))) 
    :bind
    (:map cider-repl-mode-map
          ("C-c C-l" . cider-repl-clear-buffer))
    :config
    (evil-collection-init 'cider))
#+END_SRC

** =cider-repl-mode=
Major mode for the Cider REPL. Enable subword mode in it, but diminish it.
#+BEGIN_SRC emacs-lisp
  (add-hook 'cider-repl-mode-hook (lambda ()
                                    (subword-mode 1)
                                    (diminish 'subword-mode)))
#+END_SRC
* Scheme
** Install & use =xscheme=
=xscheme= is a small, simple library that is recommended for interacting with the equally small and
simple *MIT scheme* implementation of the scheme language. Use of this library requires separate installation
of the MIT scheme interpreter binary, and the presence of that library in the PATH. It can be
installed on Mac OS with =brew install mit-scheme=.
#+begin_src emacs-lisp
  (require 'xscheme)
#+end_src
Define a function to start a scheme process in the current buffer. Run it with =M-x bsl/scheme-repl=.
#+begin_src emacs-lisp
  (defun bsl/scheme-repl ()
    "Starts a scheme process in new window next to the current window."
    (interactive)
    (let ((new-buff-name "*scheme*"))
      (switch-to-buffer-other-window new-buff-name)
      (xscheme-start "scheme -emacs"
                     new-buff-name
                     (get-buffer-create new-buff-name)))
    (reposition-window))
#+end_src
* C
** Keybindings for Compile & Debugging
These keybindings work in both C language mode and Makefile mode
#+begin_src emacs-lisp
  (general-def
     '(c-mode-base-map makefile-mode-map)
     "C-c C-l" 'compile
     "C-c C-d" 'gud-gdb)
#+end_src
** Close Compilation Buffer If No Errors or Warnings
If the =compile= command was successful, the buffer will be visible for 1 second, then
disappear. Courtesy of [[https://stackoverflow.com/a/11059012][jpkotta]].
#+begin_src emacs-lisp
  (defun bury-compile-buffer-if-successful (buffer string)
    "Bury a compilation buffer if succeeded without warnings "
    (if (and
         (string-match "compilation" (buffer-name buffer))
         (string-match "finished" string)
         (not
          (with-current-buffer buffer
            (search-forward "warning" nil t))))
       (run-with-timer 1 nil
                        (lambda (buf)
                          (bury-buffer buf)
                          (switch-to-prev-buffer (get-buffer-window buf) 'kill))
                        buffer)))
  (add-hook 'compilation-finish-functions 'bury-compile-buffer-if-successful)
#+end_src
* Docker
** Install & use =dockerfile-mode=
=dockerfile-mode= is a major mode helpful for editing Dockerfiles.
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :defer t
    :pin melpa-stable)
#+end_src
* Git
** Install & use =magit=
=magit= is a major mode that provides a porcelain layer of tools for the =git= SCM. Map =C-c g=
to a magit command that shows the current log (commits) for the file in the current
buffer. Diminish the emacs built-in =auto-revert-mode= which gets enabled for files in git projects.
#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :after evil-collection
    :pin melpa-stable
    :diminish auto-revert-mode
    :config
    (evil-collection-init 'magit)
    :bind
    ("C-c g" . magit-log-buffer-file))
#+end_src
* Projects
** =projectile=
[[https://docs.projectile.mx/projectile/index.html][projectile]] is a major mode that allows for managing sets of files & buffers that constitute some
type of /project/, such as git, maven, leiningen, etc. It can auto-discover these types of
projects, or you can define them yourself. It is set here to auto-discover project files first in
the local directory and next in directories higher up in the hierarchy from the current
directory. The functionality of searching by symbol is accomplished by the third-party tool
=ctags=. It is recommended to install the better version of this than the one that ships with
Emacs, called /Universal ctags/, which is available via homebrew, etc.
#+begin_src emacs-lisp
  (use-package projectile
    :pin melpa-stable
    :init (projectile-mode 1)
    :custom (projectile-switch-project-action #'projectile-dired)
    (projectile-mode-line-prefix "")
    (projectile-mode-line-function
     '(lambda () (format " [%s]" (projectile-project-name))))
    (projectile-completion-system 'ivy)
    (projectile-project-root-functions '(projectile-root-local projectile-root-bottom-up))
    ;; Not sure why, but .git marker needs to come at end for bottom-up project discovery to work
    (projectile-project-root-files-bottom-up '(".projectile" "project.clj" "build.sbt"
                                               "pyproject.toml" ".git"))
    :bind
    (:map projectile-mode-map
          ("C-c p" . projectile-command-map))
    (:map projectile-command-map
          ("s" . nil))) ; Unbinding the keymap for C-c p s to be used by counsel-projectile
#+end_src

** =counsel= integration with =projectile=
Mostly overrides =projectile= commands and keybindings to work better with =counsel=. See [[https://github.com/ericdanan/counsel-projectile][here]]
for documentation. We are binding the normal projectile search key (=C-c p s=) to the extremely
fast and useful version of grep called [[https://github.com/BurntSushi/ripgrep][ripgrep]]. The ripgrep command =rg= needs to be installed
and present on the system PATH (example: =brew install ripgrep=).
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :pin melpa-stable
    :after projectile
    :init (counsel-projectile-mode)
    :bind (:map projectile-command-map
                ("s" . counsel-projectile-rg))
    ;; Make the default action for counsel-projectile-switch-project-action
    ;; be the 'D' action, which specifies to open the project with dired 
    :config (setq counsel-projectile-switch-project-action
                  (cons 4
                        (cdr
                         (eval 'counsel-projectile-switch-project-action)))))
#+end_src

* Diff
Use built-in =ediff= for viewing and editing file differences. Bind the function to diff two files
which are prompted for to a useful custom key (=C-c d=). Also, bind the function to diff to
buffers to a custom key (=C-c b=).

Put the "control panel" in the same frame as everything else.
#+begin_src emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src
Make ediff horizontally split the buffers to compare
#+begin_src emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
#+end_src
